package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.boardVO;
import domain.pagingVO;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnailator;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;
import service.CommentService;
import service.CommentServiceImpl;


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	//로그기록 객체 생성
	private static final Logger log=LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp; //jsp에서 받은 요청을 처리,결과를 다른 jsp로 보내는 역할을 하는 객체
	private String destPage; //목적지 주소 기록 변수
	private int isOk; //DB의 구문 체크 값 저장
	//controller <-> service,service <-> dao
	private BoardService bsv;//아직 미구현 (service-> interface)
	private CommentService csv;
	private String savePath;//파일 경로를 저장할 변수
    public BoardController() 
    {
        bsv=new BoardServiceImpl();
        csv=new CommentServiceImpl();
    }

	
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		//모든 처리가 이루어지는 부분
		//각 객체의 인코딩 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String uri=request.getRequestURI();//jsp에서 오는 요청 주소
		log.info("uri"+uri);
		String path=uri.substring(uri.lastIndexOf("/")+1);
		log.info("실제 요청 경로>>"+path);
		switch(path)
		{
		case "register":
			//글쓰기 페이지로 이동해서 페이지가 나오도록 설정
			//목적지주소 설정
			destPage="/board/register.jsp";
			break;
//		case "insert":
//			try {
//				String title=request.getParameter("title");
//				String writer=request.getParameter("writer");
//				String content=request.getParameter("content");
//				boardVO bvo=new boardVO(title, writer, content);
//				log.info("insert check 1");
//				isOk=bsv.insert(bvo);
//				destPage="/index.jsp";
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//			break;
		case "insert":
			try {
				//파일을 업로드할 경로 설정(업로드 할때 설정)
				savePath=getServletContext().getRealPath("/_fileUpload");//fileUpload 파일에 저장
				File fileDir=new File(savePath);
				log.info("파일 저장 위치:"+savePath);
				
				//디스크에 파일을 저장할때 사용하는 객체
				//파일 객체를 생성하기 위한 객체(파일에 대한 정보를 설정)
				DiskFileItemFactory fileItemFactory=new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);	//저장할 위치 설정 set(file객체로 지정)
				fileItemFactory.setSizeThreshold(2*1024*1024);//저장을 위한 임시메모리 용량 설정:byte단위
				boardVO bvo=new boardVO();
				
				//multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 객체형식으로 저장
				ServletFileUpload fileUpload=new ServletFileUpload(fileItemFactory);
				
				List<FileItem> itemList=fileUpload.parseRequest(request);
				//DB로 넘기기 위한 BoardVO 객체로 변환. 이미지는 저장
				for(FileItem item:itemList)
				{
					switch (item.getFieldName()) 
					{
					case "title":
						bvo.setTitle(item.getString("utf-8"));//인코딩 형식을 담아서 변환
						break;
					case "writer":
						bvo.setWriter(item.getString("utf-8"));
						break;
					case "content":
						bvo.setContent(item.getString("utf-8"));
						break;
					case "image_file":
						//이미지 저장 처리가 필요
						//이미지가 필수x 없는 경우에도 처리
						//이미지가 있는지 체크
						if(item.getSize()>0)//데이터의 크기가있으면 이미지가 있는걸로 처리
						{
							//경로를 포함해서 들어오는 케이스가 있음
							String fileName=item.getName().substring(item.getName().lastIndexOf("/")+1);//파일이름만분리
							//시스템의 현재시간_파일이름.jpg
							fileName=System.currentTimeMillis()+"_"+fileName;
							//파일객체생성 : D:~/fileUpload/시간_cat2.jpg
							File uploadFilePath=new File(fileDir+File.separator+fileName);
							log.info("파일경로+이름:"+uploadFilePath);
							//저장
							try {	//한번더 try catch로 안감싸주면 error,어디서 error가 났는지 확실하게 하기
								item.write(uploadFilePath);//자바객체를 디스크에 쓰기
								bvo.setImage_File(fileName);
								
								//썸네일 작업 : 트래픽 과다사용 방지
								//of:직접생성
								Thumbnails.of(uploadFilePath).size(60,60).toFile(new File(fileDir+File.separator+"_th_"+fileName));
							} catch (Exception e) {
								log.info(">>file writer on disk error");
								e.printStackTrace();
							}
						}
						break;
					}
				}
				//DB에 bvo 저장요청
				isOk=bsv.insert(bvo);
				log.info((isOk>0)? "ok":"fail");
				destPage="pageList";
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			break;
		case "list":
			try {
				log.info("list check 1");
				List<boardVO>list=bsv.list();
				request.setAttribute("list",list);
				destPage="/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "detail":
			try {
				int bno=Integer.parseInt(request.getParameter("bno"));
				log.info("detail check 1");
				isOk=bsv.viewup(bno);
				log.info((isOk>0)? "Ok":"Fail");
				boardVO bvo=bsv.detail(bno);
				request.setAttribute("bvo", bvo);
				destPage="/board/detail.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "modify":
			try {
				int bno=Integer.parseInt(request.getParameter("bno"));
				boardVO bvo=bsv.detail(bno);
				request.setAttribute("bvo",bvo);
				destPage="/board/modify.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
//		case "edit":
//			try {
//				int bno=Integer.parseInt(request.getParameter("bno"));
//				String title=request.getParameter("title");
//				String writer=request.getParameter("writer");
//				String content=request.getParameter("content");
//				log.info("bvo"+title,writer,content);
//				boardVO bvo=new boardVO(bno, title, writer, content);
//				isOk=bsv.edit(bvo);
//				destPage="list";
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//			break;
		case "edit":
			try {
				//파일 저장 경로 설정
				//getServletContext 서버에대한 정보를 가지고있는 
				//getRealPath -실제 경로
				savePath=getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				//디스크에 기록할 파일 정보를 setting하는 객체
				DiskFileItemFactory fileItemFactory =new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);//저장경로설정
				fileItemFactory.setSizeThreshold(2*1024*1024);//임시 저장 용량 설정 2mb
				
				boardVO bvo=new boardVO();
				
				ServletFileUpload fileUpload=new ServletFileUpload(fileItemFactory);
				log.info(">> update 준비");
				
				List<FileItem> itemList=fileUpload.parseRequest(request);
				
				String old_file=null;//수정하기 전 원래ㅔ 그림파일
				for(FileItem item:itemList)
				{
					switch (item.getFieldName()) 
					{
					case "title":
						bvo.setTitle(item.getString("utf-8"));//인코딩 형식을 담아서 변환
						break;
					case "writer":
						bvo.setWriter(item.getString("utf-8"));
						break;
					case "content":
						bvo.setContent(item.getString("utf-8"));
						break;
					case "image_file":
						//이미지 저장 처리가 필요
						//이미지가 필수x 없는 경우에도 처리
						//이미지가 있는지 체크
						if(item.getSize()>0)//데이터의 크기가있으면 이미지가 있는걸로 처리
						{
							//경로를 포함해서 들어오는 케이스가 있음
							String fileName=item.getName().substring(item.getName().lastIndexOf("/")+1);//파일이름만분리
							//시스템의 현재시간_파일이름.jpg
							fileName=System.currentTimeMillis()+"_"+fileName;
							//파일객체생성 : D:~/fileUpload/시간_cat2.jpg
							File uploadFilePath=new File(fileDir+File.separator+fileName);
							log.info("파일경로+이름:"+uploadFilePath);
							//저장
							try {	//한번더 try catch로 안감싸주면 error,어디서 error가 났는지 확실하게 하기
								item.write(uploadFilePath);//자바객체를 디스크에 쓰기
								bvo.setImage_File(fileName);
								
								//썸네일 작업 : 트래픽 과다사용 방지
								//of:직접생성
								Thumbnails.of(uploadFilePath).size(60,60).toFile(new File(fileDir+File.separator+"_th_"+fileName));
							} catch (Exception e) {
								log.info(">>file writer on disk error");
								e.printStackTrace();
							}
						}
						break;
					}
					
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "remove":
			try {
				int bno=Integer.parseInt(request.getParameter("bno"));
				isOk=csv.removeAll(bno);
				isOk=bsv.remove(bno);
				destPage="list";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "pageList":
			try {
				//jsp에서 파라미터 받기
				pagingVO pgvo=new pagingVO();// 1,10(처음 list에 접속할때)
				//request에 pageNo의 값이 존재할때(null이 아닐때)==
				//list.jsp에서 페이지번호버튼을 눌러 pageList를 호출할때
				if(request.getParameter("pageNo")!=null)
				{
					//페이지번호와 qty를 받아와 pagingVO를 생성
					int pageNo=Integer.parseInt(request.getParameter("pageNo"));
					int qty=Integer.parseInt(request.getParameter("qty"));
					pgvo=new pagingVO(pageNo, qty);
				}
				String type=request.getParameter("type");
				String keyword=request.getParameter("keyword");
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				//pagingVO,totalCount
				int totalCount=bsv.getTotalCount(pgvo);//db에서 전체 카운트 요청
				//bsv pgvo 주고,limit 적용한 리스트 10개 가져오기
				List<boardVO>list=bsv.getPageList(pgvo);
				request.setAttribute("list",list);
				//페이지 정보를 list.jsp로 보내기
				PagingHandler ph=new PagingHandler(pgvo, totalCount);
				request.setAttribute("ph",ph);
				destPage="/board/list.jsp";
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		}
		//목적지 데이터 경로로 전달해주는 객체(requestDispatcher)
		rdp=request.getRequestDispatcher(destPage);
		rdp.forward(request, response);//요청에 필요한 객체를 가지고,경로로 이동
		
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		
		service(request,response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		service(request,response);
	}

}
